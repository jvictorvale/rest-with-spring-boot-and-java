name: Continuous Integration and Delivery with Github Actions

on:
  push:
    branches:
    - "main"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

    - name: Login to Google Cloud Platform
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}


#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v4
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

#    - name: Login to Amazon ECR
#      id: login-ecr
#      uses: aws-actions/amazon-ecr-login@v2

    - name: Configure Docker Authentication for Google Cloud Artifact Registry
      run: gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Setup Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: maven

    - name: Build Application .jar
      working-directory: ./rest-with-spring-boot-and-java
      run: mvn clean package -DskipTests

    - name: Docker Compose Build
      run: docker compose build
#
#    - name: Tag and Push to Docker Image to Amazon Container Registry - ECR
#      run: |
#        docker tag ${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot:latest ${{ secrets.IMAGE_REPO_URL }}:latest
#        docker tag ${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot:latest ${{ secrets.IMAGE_REPO_URL }}:${{ github.run_id }}
#
#        docker push ${{ secrets.IMAGE_REPO_URL }}:latest
#        docker push ${{ secrets.IMAGE_REPO_URL }}:${{ github.run_id }}
#
#    - name: Download task definition
#      run: |
#        aws ecs describe-task-definition --task-definition ${{ secrets.TASK_DEFINITION_NAME }} --query taskDefinition > task-definition.json
#
#    - name: Fill in the new image ID in the Amazon ECS task definition
#      id: task-def
#      uses: aws-actions/amazon-ecs-render-task-definition@v1
#      with:
#        task-definition: task-definition.json
#        container-name: ${{ secrets.CONTAINER_NAME }}
#        image: ${{ secrets.IMAGE_REPO_URL }}:latest
#
#    - name: Deploy Amazon ECS task definition
#      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
#      with:
#        task-definition: ${{ steps.task-def.outputs.task-definition }}
#        service: ${{ secrets.SERVICE_NAME }}
#        cluster: ${{ secrets.CLUSTER_NAME }}
#        wait-for-service-stability: true

    - name: Push to Google Cloud Artifact Registry
      run: |
        docker tag ${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot:latest ${{ secrets.REGISTRY_INFO }}/${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot:latest
        docker tag ${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot:latest ${{ secrets.REGISTRY_INFO }}/${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot:${{ github.run_id }}
        
        docker push ${{ secrets.REGISTRY_INFO }}/${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot:latest
        docker push ${{ secrets.REGISTRY_INFO }}/${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot:${{ github.run_id }}
        
    - name: Push to Docker Hub Container Registry
      run: |
        docker tag ${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot:latest ${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot:${{ github.run_id }}
        
        docker push ${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot:${{ github.run_id }}
